{
  "version": 4,
  "terraform_version": "1.1.2",
  "serial": 4,
  "lineage": "a9719b69-6509-915a-f44a-7841dfe9a35b",
  "outputs": {
    "dev_website_endpoint": {
      "value": "http://dev-inherently-distinct-kite.s3-website.us-east-2.amazonaws.com/index.html",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "dev",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "public-read",
            "arn": "arn:aws:s3:::dev-inherently-distinct-kite",
            "bucket": "dev-inherently-distinct-kite",
            "bucket_domain_name": "dev-inherently-distinct-kite.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "dev-inherently-distinct-kite.s3.us-east-2.amazonaws.com",
            "cors_rule": [],
            "force_destroy": true,
            "grant": [],
            "hosted_zone_id": "Z2O1EMRO9K5GLX",
            "id": "dev-inherently-distinct-kite",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": "{\"Statement\":[{\"Action\":[\"s3:GetObject\"],\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":[\"arn:aws:s3:::dev-inherently-distinct-kite/*\"],\"Sid\":\"PublicReadGetObject\"}],\"Version\":\"2012-10-17\"}",
            "region": "us-east-2",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [],
            "tags": null,
            "tags_all": {},
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [
              {
                "error_document": "error.html",
                "index_document": "index.html",
                "redirect_all_requests_to": "",
                "routing_rules": ""
              }
            ],
            "website_domain": "s3-website.us-east-2.amazonaws.com",
            "website_endpoint": "dev-inherently-distinct-kite.s3-website.us-east-2.amazonaws.com"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "random_pet.petname"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_object",
      "name": "dev",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": "public-read",
            "bucket": "dev-inherently-distinct-kite",
            "bucket_key_enabled": false,
            "cache_control": "",
            "content": "\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003eTerramino\u003c/title\u003e\n    \u003cstyle\u003e\n      html,\n      body {\n        height: 100%;\n        margin: 0;\n      }\n\n      body {\n\n        background-image: url(\"https://raw.githubusercontent.com/hashicorp/learn-terraform-circleci/master/assets/background.png\");\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      canvas {\n        border: 1px solid white;\n      }\n    \u003c/style\u003e\n  \u003c/head\u003e\n\n  \u003cbody\u003e\n    \u003ccanvas width=\"320\" height=\"640\" id=\"game\"\u003e\u003c/canvas\u003e\n    \u003cscript\u003e\n      // https://tetris.fandom.com/wiki/Tetris_Guideline\n\n      // get a random integer between the range of [min,max]\n      // @see https://stackoverflow.com/a/1527820/2124254\n      function getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n\n      // generate a new tetromino sequence\n      // @see https://tetris.fandom.com/wiki/Random_Generator\n      function generateSequence() {\n        const sequence = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"];\n\n        while (sequence.length) {\n          const rand = getRandomInt(0, sequence.length - 1);\n          const name = sequence.splice(rand, 1)[0];\n          tetrominoSequence.push(name);\n        }\n      }\n\n      // get the next tetromino in the sequence\n      function getNextTetromino() {\n        if (tetrominoSequence.length === 0) {\n          generateSequence();\n        }\n\n        const name = tetrominoSequence.pop();\n        const matrix = tetrominos[name];\n\n        // I and O start centered, all others start in left-middle\n        const col = playfield[0].length / 2 - Math.ceil(matrix[0].length / 2);\n\n        // I starts on row 21 (-1), all others start on row 22 (-2)\n        const row = name === \"I\" ? -1 : -2;\n\n        return {\n          name: name, // name of the piece (L, O, etc.)\n          matrix: matrix, // the current rotation matrix\n          row: row, // current row (starts offscreen)\n          col: col // current col\n        };\n      }\n\n      // rotate an NxN matrix 90deg\n      // @see https://codereview.stackexchange.com/a/186834\n      function rotate(matrix) {\n        const N = matrix.length - 1;\n        const result = matrix.map((row, i) =\u003e\n          row.map((val, j) =\u003e matrix[N - j][i])\n        );\n\n        return result;\n      }\n\n      // check to see if the new matrix/row/col is valid\n      function isValidMove(matrix, cellRow, cellCol) {\n        for (let row = 0; row \u003c matrix.length; row++) {\n          for (let col = 0; col \u003c matrix[row].length; col++) {\n            if (\n              matrix[row][col] \u0026\u0026\n              // outside the game bounds\n              (cellCol + col \u003c 0 ||\n                cellCol + col \u003e= playfield[0].length ||\n                cellRow + row \u003e= playfield.length ||\n                // collides with another piece\n                playfield[cellRow + row][cellCol + col])\n            ) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      // place the tetromino on the playfield\n      function placeTetromino() {\n        for (let row = 0; row \u003c tetromino.matrix.length; row++) {\n          for (let col = 0; col \u003c tetromino.matrix[row].length; col++) {\n            if (tetromino.matrix[row][col]) {\n              // game over if piece has any part offscreen\n              if (tetromino.row + row \u003c 0) {\n                return showGameOver();\n              }\n\n              playfield[tetromino.row + row][tetromino.col + col] =\n                tetromino.name;\n            }\n          }\n        }\n\n        // check for line clears starting from the bottom and working our way up\n        for (let row = playfield.length - 1; row \u003e= 0; ) {\n          if (playfield[row].every(cell =\u003e !!cell)) {\n            // drop every row above this one\n            for (let r = row; r \u003e= 0; r--) {\n              playfield[r] = playfield[r - 1];\n            }\n          } else {\n            row--;\n          }\n        }\n\n        tetromino = getNextTetromino();\n      }\n\n      // show the game over screen\n      function showGameOver() {\n        cancelAnimationFrame(rAF);\n        gameOver = true;\n\n        context.fillStyle = \"black\";\n        context.globalAlpha = 0.75;\n        context.fillRect(0, canvas.height / 2 - 30, canvas.width, 60);\n\n        context.globalAlpha = 1;\n        context.fillStyle = \"white\";\n        context.font = \"36px monospace\";\n        context.textAlign = \"center\";\n        context.textBaseline = \"middle\";\n        context.fillText(\"GAME OVER!\", canvas.width / 2, canvas.height / 2);\n      }\n\n      const canvas = document.getElementById(\"game\");\n      const context = canvas.getContext(\"2d\");\n      const grid = 32;\n      const tetrominoSequence = [];\n\n      // keep track of what is in every cell of the game using a 2d array\n      // tetris playfield is 10x20, with a few rows offscreen\n      const playfield = [];\n\n      // populate the empty state\n      for (let row = -2; row \u003c 20; row++) {\n        playfield[row] = [];\n\n        for (let col = 0; col \u003c 10; col++) {\n          playfield[row][col] = 0;\n        }\n      }\n\n      // how to draw each tetromino\n      // @see https://tetris.fandom.com/wiki/SRS\n      const tetrominos = {\n        I: [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n        J: [[1, 0, 0], [1, 1, 1], [0, 0, 0]],\n        L: [[0, 0, 1], [1, 1, 1], [0, 0, 0]],\n        O: [[1, 1], [1, 1]],\n        S: [[0, 1, 1], [1, 1, 0], [0, 0, 0]],\n        Z: [[1, 1, 0], [0, 1, 1], [0, 0, 0]],\n        T: [[0, 1, 0], [1, 1, 1], [0, 0, 0]]\n      };\n\n      // color of each tetromino\n      const colors = {\n        I: \"#623CE4\",\n        O: \"#7C8797\",\n        T: \"#00BC7F\",\n        S: \"#CA2171\",\n        Z: \"#1563ff\",\n        J: \"#00ACFF\",\n        L: \"white\"\n      };\n\n      let count = 0;\n      let tetromino = getNextTetromino();\n      let rAF = null; // keep track of the animation frame so we can cancel it\n      let gameOver = false;\n\n      // game loop\n      function loop() {\n        rAF = requestAnimationFrame(loop);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        // draw the playfield\n        for (let row = 0; row \u003c 20; row++) {\n          for (let col = 0; col \u003c 10; col++) {\n            if (playfield[row][col]) {\n              const name = playfield[row][col];\n              context.fillStyle = colors[name];\n\n              // drawing 1 px smaller than the grid creates a grid effect\n              context.fillRect(col * grid, row * grid, grid - 1, grid - 1);\n            }\n          }\n        }\n\n        // draw the active tetromino\n        if (tetromino) {\n          // tetromino falls every 35 frames\n          if (++count \u003e 35) {\n            tetromino.row++;\n            count = 0;\n\n            // place piece if it runs into anything\n            if (!isValidMove(tetromino.matrix, tetromino.row, tetromino.col)) {\n              tetromino.row--;\n              placeTetromino();\n            }\n          }\n\n          context.fillStyle = colors[tetromino.name];\n\n          for (let row = 0; row \u003c tetromino.matrix.length; row++) {\n            for (let col = 0; col \u003c tetromino.matrix[row].length; col++) {\n              if (tetromino.matrix[row][col]) {\n                // drawing 1 px smaller than the grid creates a grid effect\n                context.fillRect(\n                  (tetromino.col + col) * grid,\n                  (tetromino.row + row) * grid,\n                  grid - 1,\n                  grid - 1\n                );\n              }\n            }\n          }\n        }\n      }\n\n      // listen to keyboard events to move the active tetromino\n      document.addEventListener(\"keydown\", function(e) {\n        if (gameOver) return;\n\n        // left and right arrow keys (move)\n        if (e.which === 37 || e.which === 39) {\n          const col = e.which === 37 ? tetromino.col - 1 : tetromino.col + 1;\n\n          if (isValidMove(tetromino.matrix, tetromino.row, col)) {\n            tetromino.col = col;\n          }\n        }\n\n        // up arrow key (rotate)\n        if (e.which === 38) {\n          const matrix = rotate(tetromino.matrix);\n          if (isValidMove(matrix, tetromino.row, tetromino.col)) {\n            tetromino.matrix = matrix;\n          }\n        }\n\n        // down arrow key (drop)\n        if (e.which === 40) {\n          const row = tetromino.row + 1;\n\n          if (!isValidMove(tetromino.matrix, row, tetromino.col)) {\n            tetromino.row = row - 1;\n\n            placeTetromino();\n            return;\n          }\n\n          tetromino.row = row;\n        }\n      });\n\n      // start the game\n      rAF = requestAnimationFrame(loop);\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n",
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "text/html",
            "etag": "25e66e29196ead50c4267ce3a1d71b13",
            "force_destroy": false,
            "id": "index.html",
            "key": "index.html",
            "kms_key_id": null,
            "metadata": null,
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "server_side_encryption": "",
            "source": null,
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": null,
            "tags_all": {},
            "version_id": "",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.dev",
            "random_pet.petname"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_pet",
      "name": "petname",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "inherently-distinct-kite",
            "keepers": null,
            "length": 3,
            "prefix": null,
            "separator": "-"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ]
}
