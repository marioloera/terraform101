google_service_account.svc_github_action_application_deployment: Refreshing state... [id=projects/trustly-data-services-test/serviceAccounts/103303564377518452756]
google_project_iam_binding.composer_service_aggent2ext: Refreshing state... [id=trustly-data-services-test/roles/composer.ServiceAgentV2Ext]
module.composer_airflow_two.google_compute_network.composer_network: Refreshing state... [id=projects/trustly-data-services-test/global/networks/composer-network-two]
module.composer_airflow_two.google_project_service.composer_api: Refreshing state... [id=trustly-data-services-test/composer.googleapis.com]
google_service_account.svc_composer_worker: Refreshing state... [id=projects/trustly-data-services-test/serviceAccounts/111300218573403041422]
module.composer_airflow_two.google_compute_subnetwork.composer_subnetwork: Refreshing state... [id=projects/trustly-data-services-test/regions/europe-west1/subnetworks/composer-subnetwork-two]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.composer_airflow_two.google_composer_environment.composer will be created
  + resource "google_composer_environment" "composer" {
      + id      = (known after apply)
      + name    = "composer-env-trustly-data-services-test-two"
      + project = (known after apply)
      + region  = "europe-west1"

      + config {
          + airflow_uri      = (known after apply)
          + dag_gcs_prefix   = (known after apply)
          + environment_size = "ENVIRONMENT_SIZE_SMALL"
          + gke_cluster      = (known after apply)
          + node_count       = (known after apply)

          + database_config {
              + machine_type = (known after apply)
            }

          + encryption_config {
              + kms_key_name = (known after apply)
            }

          + maintenance_window {
              + end_time   = (known after apply)
              + recurrence = (known after apply)
              + start_time = (known after apply)
            }

          + node_config {
              + disk_size_gb         = (known after apply)
              + enable_ip_masq_agent = (known after apply)
              + ip_allocation_policy = (known after apply)
              + machine_type         = (known after apply)
              + max_pods_per_node    = (known after apply)
              + network              = "projects/trustly-data-services-test/global/networks/composer-network-two"
              + oauth_scopes         = (known after apply)
              + service_account      = "projects/trustly-data-services-test/serviceAccounts/svc-composer-worker@trustly-data-services-test.iam.gserviceaccount.com"
              + subnetwork           = "projects/trustly-data-services-test/regions/europe-west1/subnetworks/composer-subnetwork-two"
              + zone                 = (known after apply)
            }

          + private_environment_config {
              + cloud_composer_connection_subnetwork   = (known after apply)
              + cloud_composer_network_ipv4_cidr_block = (known after apply)
              + cloud_sql_ipv4_cidr_block              = (known after apply)
              + enable_private_endpoint                = (known after apply)
              + enable_privately_used_public_ips       = (known after apply)
              + master_ipv4_cidr_block                 = (known after apply)
              + web_server_ipv4_cidr_block             = (known after apply)
            }

          + software_config {
              + airflow_config_overrides = {
                  + "webserver-navbar_color" = "#00ff3c"
                }
              + image_version            = "composer-2.0.3-airflow-2.2.3"
              + pypi_packages            = {
                  + "bigquery-schema-generator" = "==1.5"
                  + "jira"                      = "==2.0.0"
                  + "simple-salesforce"         = "==1.10.1"
                  + "slack-sdk"                 = "==3.4.2"
                }
              + python_version           = (known after apply)
              + scheduler_count          = (known after apply)
            }

          + web_server_config {
              + machine_type = (known after apply)
            }

          + web_server_network_access_control {
              + allowed_ip_range {
                  + description = (known after apply)
                  + value       = (known after apply)
                }
            }

          + workloads_config {
              + scheduler {
                  + count      = (known after apply)
                  + cpu        = (known after apply)
                  + memory_gb  = (known after apply)
                  + storage_gb = (known after apply)
                }

              + web_server {
                  + cpu        = (known after apply)
                  + memory_gb  = (known after apply)
                  + storage_gb = (known after apply)
                }

              + worker {
                  + cpu        = (known after apply)
                  + max_count  = (known after apply)
                  + memory_gb  = (known after apply)
                  + min_count  = (known after apply)
                  + storage_gb = (known after apply)
                }
            }
        }
    }

  # module.composer_airflow_two.google_storage_bucket_iam_member.github_action_object_admin will be created
  + resource "google_storage_bucket_iam_member" "github_action_object_admin" {
      + bucket = (known after apply)
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:svc-application-deployment@trustly-data-services-test.iam.gserviceaccount.com"
      + role   = "roles/storage.objectAdmin"
    }

Plan: 2 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
